// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gotocompany/shield/v1beta1/servicedata.proto

package shieldv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServiceDataKeyRequestBody with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServiceDataKeyRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceDataKeyRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceDataKeyRequestBodyMultiError, or nil if none found.
func (m *ServiceDataKeyRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceDataKeyRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for Key

	// no validation rules for Description

	if len(errors) > 0 {
		return ServiceDataKeyRequestBodyMultiError(errors)
	}

	return nil
}

// ServiceDataKeyRequestBodyMultiError is an error wrapping multiple validation
// errors returned by ServiceDataKeyRequestBody.ValidateAll() if the
// designated constraints aren't met.
type ServiceDataKeyRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceDataKeyRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceDataKeyRequestBodyMultiError) AllErrors() []error { return m }

// ServiceDataKeyRequestBodyValidationError is the validation error returned by
// ServiceDataKeyRequestBody.Validate if the designated constraints aren't met.
type ServiceDataKeyRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDataKeyRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDataKeyRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDataKeyRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDataKeyRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDataKeyRequestBodyValidationError) ErrorName() string {
	return "ServiceDataKeyRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDataKeyRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDataKeyRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDataKeyRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDataKeyRequestBodyValidationError{}

// Validate checks the field values on ServiceDataKey with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceDataKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceDataKey with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceDataKeyMultiError,
// or nil if none found.
func (m *ServiceDataKey) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceDataKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	// no validation rules for Id

	if len(errors) > 0 {
		return ServiceDataKeyMultiError(errors)
	}

	return nil
}

// ServiceDataKeyMultiError is an error wrapping multiple validation errors
// returned by ServiceDataKey.ValidateAll() if the designated constraints
// aren't met.
type ServiceDataKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceDataKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceDataKeyMultiError) AllErrors() []error { return m }

// ServiceDataKeyValidationError is the validation error returned by
// ServiceDataKey.Validate if the designated constraints aren't met.
type ServiceDataKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDataKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDataKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDataKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDataKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDataKeyValidationError) ErrorName() string { return "ServiceDataKeyValidationError" }

// Error satisfies the builtin error interface
func (e ServiceDataKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDataKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDataKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDataKeyValidationError{}

// Validate checks the field values on CreateServiceDataKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceDataKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceDataKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceDataKeyRequestMultiError, or nil if none found.
func (m *CreateServiceDataKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceDataKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceDataKeyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceDataKeyRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceDataKeyRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceDataKeyRequestMultiError(errors)
	}

	return nil
}

// CreateServiceDataKeyRequestMultiError is an error wrapping multiple
// validation errors returned by CreateServiceDataKeyRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceDataKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceDataKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceDataKeyRequestMultiError) AllErrors() []error { return m }

// CreateServiceDataKeyRequestValidationError is the validation error returned
// by CreateServiceDataKeyRequest.Validate if the designated constraints
// aren't met.
type CreateServiceDataKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceDataKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceDataKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceDataKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceDataKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceDataKeyRequestValidationError) ErrorName() string {
	return "CreateServiceDataKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceDataKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceDataKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceDataKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceDataKeyRequestValidationError{}

// Validate checks the field values on CreateServiceDataKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceDataKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceDataKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceDataKeyResponseMultiError, or nil if none found.
func (m *CreateServiceDataKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceDataKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceDataKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateServiceDataKeyResponseValidationError{
					field:  "ServiceDataKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateServiceDataKeyResponseValidationError{
					field:  "ServiceDataKey",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceDataKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceDataKeyResponseValidationError{
				field:  "ServiceDataKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateServiceDataKeyResponseMultiError(errors)
	}

	return nil
}

// CreateServiceDataKeyResponseMultiError is an error wrapping multiple
// validation errors returned by CreateServiceDataKeyResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateServiceDataKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceDataKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceDataKeyResponseMultiError) AllErrors() []error { return m }

// CreateServiceDataKeyResponseValidationError is the validation error returned
// by CreateServiceDataKeyResponse.Validate if the designated constraints
// aren't met.
type CreateServiceDataKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceDataKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceDataKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceDataKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceDataKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceDataKeyResponseValidationError) ErrorName() string {
	return "CreateServiceDataKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceDataKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceDataKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceDataKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceDataKeyResponseValidationError{}

// Validate checks the field values on UpsertServiceDataRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertServiceDataRequestBody) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertServiceDataRequestBody with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertServiceDataRequestBodyMultiError, or nil if none found.
func (m *UpsertServiceDataRequestBody) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertServiceDataRequestBody) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	if len(m.GetData()) != 1 {
		err := UpsertServiceDataRequestBodyValidationError{
			field:  "Data",
			reason: "value must contain exactly 1 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpsertServiceDataRequestBodyMultiError(errors)
	}

	return nil
}

// UpsertServiceDataRequestBodyMultiError is an error wrapping multiple
// validation errors returned by UpsertServiceDataRequestBody.ValidateAll() if
// the designated constraints aren't met.
type UpsertServiceDataRequestBodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertServiceDataRequestBodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertServiceDataRequestBodyMultiError) AllErrors() []error { return m }

// UpsertServiceDataRequestBodyValidationError is the validation error returned
// by UpsertServiceDataRequestBody.Validate if the designated constraints
// aren't met.
type UpsertServiceDataRequestBodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertServiceDataRequestBodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertServiceDataRequestBodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertServiceDataRequestBodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertServiceDataRequestBodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertServiceDataRequestBodyValidationError) ErrorName() string {
	return "UpsertServiceDataRequestBodyValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertServiceDataRequestBodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertServiceDataRequestBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertServiceDataRequestBodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertServiceDataRequestBodyValidationError{}

// Validate checks the field values on UpsertUserServiceDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUserServiceDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUserServiceDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertUserServiceDataRequestMultiError, or nil if none found.
func (m *UpsertUserServiceDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUserServiceDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertUserServiceDataRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertUserServiceDataRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertUserServiceDataRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertUserServiceDataRequestMultiError(errors)
	}

	return nil
}

// UpsertUserServiceDataRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertUserServiceDataRequest.ValidateAll() if
// the designated constraints aren't met.
type UpsertUserServiceDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUserServiceDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUserServiceDataRequestMultiError) AllErrors() []error { return m }

// UpsertUserServiceDataRequestValidationError is the validation error returned
// by UpsertUserServiceDataRequest.Validate if the designated constraints
// aren't met.
type UpsertUserServiceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUserServiceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUserServiceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUserServiceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUserServiceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUserServiceDataRequestValidationError) ErrorName() string {
	return "UpsertUserServiceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUserServiceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUserServiceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUserServiceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUserServiceDataRequestValidationError{}

// Validate checks the field values on UpsertGroupServiceDataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertGroupServiceDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertGroupServiceDataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpsertGroupServiceDataRequestMultiError, or nil if none found.
func (m *UpsertGroupServiceDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertGroupServiceDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertGroupServiceDataRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertGroupServiceDataRequestValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertGroupServiceDataRequestValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertGroupServiceDataRequestMultiError(errors)
	}

	return nil
}

// UpsertGroupServiceDataRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertGroupServiceDataRequest.ValidateAll()
// if the designated constraints aren't met.
type UpsertGroupServiceDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertGroupServiceDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertGroupServiceDataRequestMultiError) AllErrors() []error { return m }

// UpsertGroupServiceDataRequestValidationError is the validation error
// returned by UpsertGroupServiceDataRequest.Validate if the designated
// constraints aren't met.
type UpsertGroupServiceDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertGroupServiceDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertGroupServiceDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertGroupServiceDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertGroupServiceDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertGroupServiceDataRequestValidationError) ErrorName() string {
	return "UpsertGroupServiceDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertGroupServiceDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertGroupServiceDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertGroupServiceDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertGroupServiceDataRequestValidationError{}

// Validate checks the field values on UpsertUserServiceDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertUserServiceDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertUserServiceDataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpsertUserServiceDataResponseMultiError, or nil if none found.
func (m *UpsertUserServiceDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertUserServiceDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	if len(errors) > 0 {
		return UpsertUserServiceDataResponseMultiError(errors)
	}

	return nil
}

// UpsertUserServiceDataResponseMultiError is an error wrapping multiple
// validation errors returned by UpsertUserServiceDataResponse.ValidateAll()
// if the designated constraints aren't met.
type UpsertUserServiceDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertUserServiceDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertUserServiceDataResponseMultiError) AllErrors() []error { return m }

// UpsertUserServiceDataResponseValidationError is the validation error
// returned by UpsertUserServiceDataResponse.Validate if the designated
// constraints aren't met.
type UpsertUserServiceDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertUserServiceDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertUserServiceDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertUserServiceDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertUserServiceDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertUserServiceDataResponseValidationError) ErrorName() string {
	return "UpsertUserServiceDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertUserServiceDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertUserServiceDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertUserServiceDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertUserServiceDataResponseValidationError{}

// Validate checks the field values on UpsertGroupServiceDataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertGroupServiceDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertGroupServiceDataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpsertGroupServiceDataResponseMultiError, or nil if none found.
func (m *UpsertGroupServiceDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertGroupServiceDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	if len(errors) > 0 {
		return UpsertGroupServiceDataResponseMultiError(errors)
	}

	return nil
}

// UpsertGroupServiceDataResponseMultiError is an error wrapping multiple
// validation errors returned by UpsertGroupServiceDataResponse.ValidateAll()
// if the designated constraints aren't met.
type UpsertGroupServiceDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertGroupServiceDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertGroupServiceDataResponseMultiError) AllErrors() []error { return m }

// UpsertGroupServiceDataResponseValidationError is the validation error
// returned by UpsertGroupServiceDataResponse.Validate if the designated
// constraints aren't met.
type UpsertGroupServiceDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertGroupServiceDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertGroupServiceDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertGroupServiceDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertGroupServiceDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertGroupServiceDataResponseValidationError) ErrorName() string {
	return "UpsertGroupServiceDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertGroupServiceDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertGroupServiceDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertGroupServiceDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertGroupServiceDataResponseValidationError{}
