// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	rule "github.com/goto/shield/core/rule"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function with given fields: ctx
func (_m *Repository) Fetch(ctx context.Context) ([]rule.Ruleset, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []rule.Ruleset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]rule.Ruleset, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []rule.Ruleset); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]rule.Ruleset)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type Repository_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) Fetch(ctx interface{}) *Repository_Fetch_Call {
	return &Repository_Fetch_Call{Call: _e.mock.On("Fetch", ctx)}
}

func (_c *Repository_Fetch_Call) Run(run func(ctx context.Context)) *Repository_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_Fetch_Call) Return(_a0 []rule.Ruleset, _a1 error) *Repository_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Fetch_Call) RunAndReturn(run func(context.Context) ([]rule.Ruleset, error)) *Repository_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// IsUpdated provides a mock function with given fields: ctx, since
func (_m *Repository) IsUpdated(ctx context.Context, since time.Time) bool {
	ret := _m.Called(ctx, since)

	if len(ret) == 0 {
		panic("no return value specified for IsUpdated")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) bool); ok {
		r0 = rf(ctx, since)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Repository_IsUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUpdated'
type Repository_IsUpdated_Call struct {
	*mock.Call
}

// IsUpdated is a helper method to define mock.On call
//   - ctx context.Context
//   - since time.Time
func (_e *Repository_Expecter) IsUpdated(ctx interface{}, since interface{}) *Repository_IsUpdated_Call {
	return &Repository_IsUpdated_Call{Call: _e.mock.On("IsUpdated", ctx, since)}
}

func (_c *Repository_IsUpdated_Call) Run(run func(ctx context.Context, since time.Time)) *Repository_IsUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time))
	})
	return _c
}

func (_c *Repository_IsUpdated_Call) Return(_a0 bool) *Repository_IsUpdated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_IsUpdated_Call) RunAndReturn(run func(context.Context, time.Time) bool) *Repository_IsUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
