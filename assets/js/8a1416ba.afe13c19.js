"use strict";(self.webpackChunkshield=self.webpackChunkshield||[]).push([[699],{5680:(e,t,r)=>{r.d(t,{xA:()=>d,yg:()=>g});var a=r(6540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,i=function(e,t){if(null==e)return{};var r,a,i={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=c(r),p=i,g=h["".concat(s,".").concat(p)]||h[p]||u[p]||n;return r?a.createElement(g,l(l({ref:t},d),{},{components:r})):a.createElement(g,l({ref:t},d))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=r.length,l=new Array(n);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[h]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<n;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6983:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var a=r(8168),i=(r(6540),r(5680));const n={},l="Architecture",o={unversionedId:"concepts/architecture",id:"concepts/architecture",title:"Architecture",description:"Shield exposes both HTTP and gRPC APIs to manage data. It also proxy APIs to other services. Shield talks to SpiceDB instance to check for authorization.",source:"@site/docs/concepts/architecture.md",sourceDirName:"concepts",slug:"/concepts/architecture",permalink:"/shield/concepts/architecture",draft:!1,editUrl:"https://github.com/goto/shield/edit/master/docs/docs/concepts/architecture.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Installation",permalink:"/shield/installation"},next:{title:"Glossary",permalink:"/shield/concepts/glossary"}},s={},c=[{value:"Tools and Technologies",id:"tools-and-technologies",level:2},{value:"Components",id:"components",level:2},{value:"API and Proxy Server",id:"api-and-proxy-server",level:3},{value:"PostgresDB",id:"postgresdb",level:3},{value:"SpiceDB",id:"spicedb",level:3},{value:"Overall System Architecture - Shield as an Authorization Service",id:"overall-system-architecture---shield-as-an-authorization-service",level:2},{value:"Overall System Architecture - Shield as a Proxy",id:"overall-system-architecture---shield-as-a-proxy",level:2},{value:"Shield Proxy Architecture",id:"shield-proxy-architecture",level:2},{value:"Middleware",id:"middleware",level:3},{value:"Rule match",id:"rule-match",level:4},{value:"Attributes",id:"attributes",level:4},{value:"Basic auth",id:"basic-auth",level:4},{value:"Authz",id:"authz",level:4},{value:"Prefix",id:"prefix",level:4},{value:"Hook",id:"hook",level:2},{value:"Authz",id:"authz-1",level:4}],d={toc:c};function h(e){let{components:t,...n}=e;return(0,i.yg)("wrapper",(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"architecture"},"Architecture"),(0,i.yg)("p",null,"Shield exposes both HTTP and gRPC APIs to manage data. It also proxy APIs to other services. Shield talks to SpiceDB instance to check for authorization."),(0,i.yg)("h2",{id:"tools-and-technologies"},"Tools and Technologies"),(0,i.yg)("p",null,"Shield is developed with"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Golang - Programming language"),(0,i.yg)("li",{parentName:"ul"},"Docker - container engine to start postgres and cortex to aid development"),(0,i.yg)("li",{parentName:"ul"},"Postgres - a relational database"),(0,i.yg)("li",{parentName:"ul"},"SpiceDB - SpiceDB is an open source database system for managing security-critical application permissions.")),(0,i.yg)("h2",{id:"components"},"Components"),(0,i.yg)("h3",{id:"api-and-proxy-server"},"API and Proxy Server"),(0,i.yg)("p",null,"Shield server exposes both HTTP and gRPC APIs (via GRPC gateway) to manage users, groups, policies, etc. It also runs a proxy server on different port."),(0,i.yg)("h3",{id:"postgresdb"},"PostgresDB"),(0,i.yg)("p",null,"There are 2 PostgresDB instances. One instance is required for Shield to store all the business logic like user detail, team detail, User's role in the team, etc."),(0,i.yg)("p",null,"Another DB instance is for SpiceDB to store all the data needed for authorization."),(0,i.yg)("h3",{id:"spicedb"},"SpiceDB"),(0,i.yg)("p",null,"Shield push all the policies and relationships data to SpiceDB. All this data is needed to make the authorization decision. Shield connects to SpiceDB instance via gRPC."),(0,i.yg)("h2",{id:"overall-system-architecture---shield-as-an-authorization-service"},"Overall System Architecture - Shield as an Authorization Service"),(0,i.yg)("p",null,"Shield can be used as an authorization service using the ",(0,i.yg)("inlineCode",{parentName:"p"},"check")," API. Currently, we just allow to check permisison over a single resource, i.e.\n",(0,i.yg)("inlineCode",{parentName:"p"},"can a USER do an ACTION on this RESOURCE"),"."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Overall System Architecture Authorization",src:r(5577).A,width:"3404",height:"1078"})),(0,i.yg)("p",null,"The API gives a boolean response. You can refer this ",(0,i.yg)("a",{parentName:"p",href:"/shield/guides/check-permission"},"guide")," for usage information."),(0,i.yg)("h2",{id:"overall-system-architecture---shield-as-a-proxy"},"Overall System Architecture - Shield as a Proxy"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Overall System Architecture Proxy",src:r(1574).A,width:"1693",height:"1564"})),(0,i.yg)("p",null,"The above diagram shows the system architecture which uses shield as a proxy. "),(0,i.yg)("p",null,"Let's have a look at the major events:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Middleware: Middlewares as their names suggest are engaged befor the request is proxied.\nThere are a few different middlewares which are ",(0,i.yg)("inlineCode",{parentName:"p"},"rule-matching"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"prefix"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"basic_auth"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"attribute")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"authz"),".\nWe'll discuss each one in details in the upcoming sections.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Hook: Hooks are engaged after a response is received form the backend service. Currently we just have a single resource creation hook named ",(0,i.yg)("inlineCode",{parentName:"p"},"authz"),". "))),(0,i.yg)("p",null,"Let's have a look at the Shield's Architecture where we will also be discussing about the different middlewares and hoooks."),(0,i.yg)("h2",{id:"shield-proxy-architecture"},"Shield Proxy Architecture"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Shield Proxy Architecture",src:r(260).A,width:"1016",height:"1376"})),(0,i.yg)("p",null,"Sheild's proxy is build from two major components which are middlewares and hooks. Let's dive deeper into each of these components."),(0,i.yg)("h3",{id:"middleware"},"Middleware"),(0,i.yg)("p",null,"Middlewares in shield have the following interface. "),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type Middleware interface {\n    Info() *MiddlewareInfo\n    ServeHTTP(rw http.ResponseWriter, req *http.Request)\n}\n\ntype MiddlewareInfo struct {\n    Name        string\n    Description string\n}\n")),(0,i.yg)("p",null,"Shield is designed to execute the middlewares in a fixed order maintained by a stack.\nThe order followed is"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Rule match"),(0,i.yg)("li",{parentName:"ul"},"Attributes"),(0,i.yg)("li",{parentName:"ul"},"Basic auth"),(0,i.yg)("li",{parentName:"ul"},"Authz"),(0,i.yg)("li",{parentName:"ul"},"Prefix")),(0,i.yg)("h4",{id:"rule-match"},"Rule match"),(0,i.yg)("p",null,"The rule match middleware finds the rule configured for a path and enriches the ",(0,i.yg)("inlineCode",{parentName:"p"},"ctx")," with it. It also enriched the ",(0,i.yg)("inlineCode",{parentName:"p"},"ctx")," with the request body."),(0,i.yg)("h4",{id:"attributes"},"Attributes"),(0,i.yg)("p",null,"The attributes middleware builds a map of the attributes passed and enriches the ",(0,i.yg)("inlineCode",{parentName:"p"},"ctx")," with it."),(0,i.yg)("h4",{id:"basic-auth"},"Basic auth"),(0,i.yg)("p",null,"This middleware can be configured to support basic authentication with shield."),(0,i.yg)("h4",{id:"authz"},"Authz"),(0,i.yg)("p",null,"This middleware checks in the SpiceDB if the user is authorized with atleast one (OR operation) the permissions."),(0,i.yg)("h4",{id:"prefix"},"Prefix"),(0,i.yg)("p",null,"This middleware strips a configured prefix from the request's URL path."),(0,i.yg)("h2",{id:"hook"},"Hook"),(0,i.yg)("p",null,"Hooks in shield have the following interface."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type Service interface {\n    Info() Info\n    ServeHook(res *http.Response, err error) (*http.Response, error)\n}\n")),(0,i.yg)("p",null,"Shield only have a single hook"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Authz")),(0,i.yg)("h4",{id:"authz-1"},"Authz"),(0,i.yg)("p",null,"Authz hook persists the resource been created in the configfured backencd in Shield's DB. It does not create any relation by default but relations can be configured too. The relashions are created and stored both in Shield's DB and SpiceDB."))}h.isMDXComponent=!0},1574:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/overall-proxy-architecture-48811412980d6e7f6e189ac67bef9989.png"},5577:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/shield-authorization-architecture-a509f8277548d0f59a940090b020d694.png"},260:(e,t,r)=>{r.d(t,{A:()=>a});const a=r.p+"assets/images/shield-proxy-architecture-fe8a576f87c60d6a03a611759f8fd367.png"}}]);