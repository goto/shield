"use strict";(self.webpackChunkshield=self.webpackChunkshield||[]).push([[806],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||i;return t?r.createElement(m,s(s({ref:n},c),{},{components:t})):r.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[d]="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2973:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const i={},s="Setup Server",o={unversionedId:"tour/setup-server",id:"tour/setup-server",title:"Setup Server",description:"Shield binary contains both the CLI client and the server itself. Each has it's own configuration in order to run. Server configuration contains information such as database credentials, log severity, etc. while CLI client configuration only has configuration about which server to connect.",source:"@site/docs/tour/setup-server.md",sourceDirName:"tour",slug:"/tour/setup-server",permalink:"/shield/tour/setup-server",draft:!1,editUrl:"https://github.com/goto/shield/edit/master/docs/docs/tour/setup-server.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/shield/tour/intro"},next:{title:"What is in Shield?",permalink:"/shield/tour/what-is-in-shield"}},l={},p=[{value:"Server",id:"server",level:2},{value:"Pre-Requisites",id:"pre-requisites",level:3},{value:"Initialization",id:"initialization",level:3},{value:"Migrating the server",id:"migrating-the-server",level:3},{value:"Starting the server",id:"starting-the-server",level:3}],c={toc:p};function d(e){let{components:n,...i}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"setup-server"},"Setup Server"),(0,a.kt)("p",null,"Shield binary contains both the CLI client and the server itself. Each has it's own configuration in order to run. Server configuration contains information such as database credentials, log severity, etc. while CLI client configuration only has configuration about which server to connect."),(0,a.kt)("h2",{id:"server"},"Server"),(0,a.kt)("h3",{id:"pre-requisites"},"Pre-Requisites"),(0,a.kt)("p",null,"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PostgreSQL"),(0,a.kt)("li",{parentName:"ul"},"[SpiceDB]","((",(0,a.kt)("a",{parentName:"li",href:"https://github.com/authzed/spicedb"},"https://github.com/authzed/spicedb"),")")),(0,a.kt)("p",null,"You need to prepare and run above dependencies first before running Shield. Shield also has a ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file in its repo that has all required dependencies. If you are interested to use it, you just need to git clone the repo and run ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose up")," in the root project."),(0,a.kt)("h3",{id:"initialization"},"Initialization"),(0,a.kt)("p",null,"This steps assumes all dependencies already up and running. Create a server config ",(0,a.kt)("inlineCode",{parentName:"p"},"config.yaml")," file (shield server init) in the root folder of shield project or use ",(0,a.kt)("inlineCode",{parentName:"p"},"--config")," flag to customize to a certain config file location or you can also use environment variables to provide the server config."),(0,a.kt)("p",null,"Setup a database in postgres and provide the details in the DB field as given in the example below. For the purpose of this tutorial, we'll assume that the username is shield, password is 12345, database name is shield, host and port are localhost and 5432. Also, setup a SpiceDB database on localhost port 50051 and pre_shared_key value shield."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'version: 1\nproxy:\n  services:\n  - port: 5556\n    host: 0.0.0.0\n    name: base\n    ruleset: file:///path/to/shield/rules\nlog:\n  level: info\n  format: json\nnew_relic:\n  app_name: ""\n  license: ""\n  enabled: false\napp:\n  port: 8000\n  host: 127.0.0.1\n  identity_proxy_header: X-Shield-Email\n  resources_config_path: file:///path/to/shield/resources_config\ndb:\n  driver: postgres\n  url: postgres://shield:12345@localhost:5432/shield?sslmode=disable\n  max_idle_conns: 10\n  max_open_conns: 10\n  conn_max_life_time: 10ms\n  max_query_timeout: 100ms\nspicedb:\n  host: localhost\n  port: 50051\n  pre_shared_key: shield\n\n')),(0,a.kt)("p",null,"You need to define the policies in a YAML file and pass it's directory path to ",(0,a.kt)("inlineCode",{parentName:"p"},"resources_config_path"),". The rules for each path shall be defined in another YAML file and pass it's path to ",(0,a.kt)("inlineCode",{parentName:"p"},"ruleset"),"."),(0,a.kt)("p",null,"Next, let's look at a example policy configuration for a backend ",(0,a.kt)("inlineCode",{parentName:"p"},"entropy")," with ",(0,a.kt)("inlineCode",{parentName:"p"},"firehose")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"dagger")," resource types. Also, we have defined roles for ",(0,a.kt)("inlineCode",{parentName:"p"},"organizations")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"project")," to demonstrate shield's flexibility to define policy for different category of namespaces."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"entropy:\n  type: resource_group\n  resource_types:\n    - name: firehose\n      roles:\n        - name: viewer\n          principals:\n            - shield/user\n            - shield/group\n        - name: sink_editor\n          principals:\n            - shield/user\n            - shield/group\n      permissions:\n        - name: view\n          roles:\n            - owner\n            - organization/owner\n            - viewer\n        - name: sink_edit\n          roles:\n            - owner\n            - sink_editor\n            - organization/sink_editor\n\nshield/organization:\n  type: system\n  roles:\n    - name: sink_editor\n      principals:\n        - shield/user\n        - shield/group\n    - name: database_editor\n      principals:\n        - shield/group\n\nshield/project:\n  type: system\n  roles:\n    - name: viewer\n      principals:\n        - shield/user\n        - shield/group\n    - name: owner\n      principals:\n        - shield/group\n\n")),(0,a.kt)("p",null,"Finally, we'll have a look at an example rule configuration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'rules:\n  - backends:\n      - name: entropy\n        target: "http://entropy.io"\n        prefix: "/api"\n        frontends:\n          - name: list_firehoses\n            path: "/api/firehoses"\n            method: "GET"\n          - name: list_firehoses\n            path: "/api/firehoses/{firehose_id}"\n            method: "GET"\n          - name: create_firehose\n            path: "/api/firehoses"\n            method: "POST"\n            hooks:\n              - name: authz\n                config:\n                  action: authz_action\n                  attributes:\n                    resource:\n                      key: firehose.name\n                      type: json_payload\n                    project:\n                      key: X-Shield-Project\n                      type: header\n                      source: request\n                    organization:\n                      key: X-Shield-Org\n                      type: header\n                      source: request\n                    resource_type:\n                      value: "firehose"\n                      type: constant\n                    group_attribute:\n                      key: X-Shield-Group\n                      type: header\n                      source: request\n                  relations:\n                    - role: owner\n                      subject_principal: shield/group\n                      subject_id_attribute: group_attribute\n          - name: update_firehose_status\n            path: "/firehoses/{resource}/{action}"\n            method: "PUT"\n            middlewares:\n              - name: authz\n                config:\n                  actions:\n                    - odin_firehose_update\n                    - odin_firehose_all_actions\n                  attributes:\n                    resource_type:\n                      value: "firehose"\n                      type: constant\n                    project:\n                      key: X-Shield-Project\n                      type: header\n                      source: request\n          - name: update_firehose\n            path: "/api/firehoses/{resource}"\n            method: "PUT"\n            middlewares:\n              - name: authz\n                config:\n                  actions:\n                    - odin_firehose_update\n                    - odin_firehose_all_actions\n                  attributes:\n                    resource_type:\n                      value: "firehose"\n                      type: constant\n                    project:\n                      key: X-Shield-Project\n                      type: header\n                      source: request\n          - name: firehose_history\n            path: "/api/history/firehose/{firehose_name}"\n            method: "GET"\n          - name: dagger_history\n            path: "/api/history/dagger/{dagger_name}"\n            method: "GET"\n          - name: update_firehose_alerts\n            path: "/api/alerts/firehose/{resource}"\n            method: "PUT"\n            middlewares:\n              - name: authz\n                config:\n                  actions:\n                    - odin_firehose_update\n                    - odin_firehose_all_actions\n                  attributes:\n                    project:\n                      key: X-Shield-Project\n                      type: header\n                      source: request\n                    resource_type:\n                      value: "firehose"\n                      type: constant\n\n')),(0,a.kt)("h3",{id:"migrating-the-server"},"Migrating the server"),(0,a.kt)("p",null,"Database migration is required during the first server initialization. In addition, re-running the migration command might be needed in a new release to apply the new schema changes (if any). It's safer to always re-run the migration script before deploying/starting a new release."),(0,a.kt)("p",null,"To initialize the database schema, Run Migrations with the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ shield server migrate\n")),(0,a.kt)("p",null,"Using ",(0,a.kt)("inlineCode",{parentName:"p"},"--config")," flag"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ shield server migrate --config=<path-to-file>\n")),(0,a.kt)("p",null,"If migration command throws the following error, you need to create the databases first."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'pq: database "shield" does not exist\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'pq: database "spicedb" does not exist\n')),(0,a.kt)("p",null,"Let's verify the migration by looking at the tables created in both the databases."),(0,a.kt)("p",null,"We will use ",(0,a.kt)("inlineCode",{parentName:"p"},"SQL Shell (psql)")," to connect to each instance."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Shield connection config",src:t(4729).Z,width:"734",height:"150"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SpiceDB connection config",src:t(1662).Z,width:"734",height:"150"})),(0,a.kt)("p",null,"Let's display all the tables in both the postgres databases"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ \\dt\n")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Shield tables",src:t(7130).Z,width:"650",height:"478"})),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SpiceDB tables",src:t(6865).Z,width:"764",height:"130"})),(0,a.kt)("h3",{id:"starting-the-server"},"Starting the server"),(0,a.kt)("p",null,"Now, it's time to start the server, but before that, let's open a browser tab and open ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8080")," to have a look at the permission schema on SpiceDB."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SpiceDB permission schema before",src:t(438).Z,width:"1740",height:"1310"})),(0,a.kt)("p",null,"To run the Shield server use command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ shield server start\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ shield server start --config=<path-to-file>\n")),(0,a.kt)("p",null,"You will see the similar logs as following, based on your configs"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Server start cmd output",src:t(5088).Z,width:"2060",height:"1526"})),(0,a.kt)("p",null,"You can ping the server to verify"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"curl --location --request GET 'http://localhost:8000/admin/ping'\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"pong\n")),(0,a.kt)("p",null,"Let's verify in the browser, if the SpiceDB permission schema is updated"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"SpiceDB permission schema after",src:t(8414).Z,width:"2238",height:"1552"})))}d.isMDXComponent=!0},8414:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/permission-schema-after-fff842e35a4eeec2a49ac4821cb89f8b.png"},438:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/permission-schema-before-28f1a407ce6a21139b80cd89249dc3b9.png"},5088:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/server-start-cmd-output-d84b3e18e48f162bc3faf4794237f64c.png"},4729:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/shield-connection-config-8060f4aee680f8ff6c1e21680578450e.png"},7130:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/shield-tables-12ff66af28ef8874ae8917e3536b8306.png"},1662:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/spicedb-connection-config-94923ad15efd87ed473d0d9a61bbea8a.png"},6865:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/spicedb-tables-b98e9365063af7421abd22dbb2d6a168.png"}}]);