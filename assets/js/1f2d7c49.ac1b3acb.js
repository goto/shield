"use strict";(self.webpackChunkshield=self.webpackChunkshield||[]).push([[330],{5162:(e,a,t)=>{t.d(a,{Z:()=>s});var n=t(7294),r=t(6010);const l="tabItem_Ymn6";function s(e){let{children:a,hidden:t,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,s),hidden:t},a)}},5488:(e,a,t)=>{t.d(a,{Z:()=>p});var n=t(7462),r=t(7294),l=t(6010),s=t(2389),i=t(7392),o=t(7094),d=t(2466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){const{lazy:a,block:t,defaultValue:s,values:m,groupId:p,className:h}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??k.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),b=(0,i.l)(g,((e,a)=>e.value===a.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===s?s:s??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==f&&!g.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,o.U)(),[T,w]=(0,r.useState)(f),E=[],{blockElementScrollPositionUntilNextRender:N}=(0,d.o5)();if(null!=p){const e=v[p];null!=e&&e!==T&&g.some((a=>a.value===e))&&w(e)}const I=e=>{const a=e.currentTarget,t=E.indexOf(a),n=g[t].value;n!==T&&(N(a),w(n),null!=p&&y(p,String(n)))},C=e=>{let a=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;a=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;a=E[t]??E[E.length-1];break}}a?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},h)},g.map((e=>{let{value:a,label:t,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===a?0:-1,"aria-selected":T===a,key:a,ref:e=>E.push(e),onKeyDown:C,onClick:I},s,{className:(0,l.Z)("tabs__item",c,s?.className,{"tabs__item--active":T===a})}),t??a)}))),a?(0,r.cloneElement)(k.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,a)=>(0,r.cloneElement)(e,{key:a,hidden:e.props.value!==T})))))}function p(e){const a=(0,s.Z)();return r.createElement(m,(0,n.Z)({key:String(a)},e))}},8047:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>u,toc:()=>m});var n=t(7462),r=(t(7294),t(3905)),l=t(5488),s=t(5162),i=t(814);const o={},d="Adding Metadata Keys",u={unversionedId:"guides/adding-metadata-key",id:"guides/adding-metadata-key",title:"Adding Metadata Keys",description:"A metadata-key in Shield looks like",source:"@site/docs/guides/adding-metadata-key.md",sourceDirName:"guides",slug:"/guides/adding-metadata-key",permalink:"/shield/guides/adding-metadata-key",draft:!1,editUrl:"https://github.com/odpf/shield/edit/master/docs/docs/guides/adding-metadata-key.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Managing Users",permalink:"/shield/guides/managing-user"},next:{title:"Configurations",permalink:"/shield/reference/configurations"}},c={},m=[{value:"API Interface",id:"api-interface",level:2},{value:"Create metadata keys",id:"create-metadata-keys",level:3}],p={toc:m};function h(e){let{components:a,...t}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adding-metadata-keys"},"Adding Metadata Keys"),(0,r.kt)("p",null,"A metadata-key in Shield looks like"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "metadatakey": {\n        "key": "manager",\n        "description": "manager of this user"\n    }\n}\n')),(0,r.kt)("h2",{id:"api-interface"},"API Interface"),(0,r.kt)("h3",{id:"create-metadata-keys"},"Create metadata keys"),(0,r.kt)(l.Z,{groupId:"api",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"HTTP",label:"HTTP",default:!0,mdxType:"TabItem"},(0,r.kt)(i.Z,{className:"language-bash",mdxType:"CodeBlock"},"$ curl --location --request POST 'http://localhost:8000/admin/v1beta1/metadatakey'\n--header 'Content-Type: application/json'\n--header 'Accept: application/json'\n--data-raw '{\n  \"key\": \"manager\",\n  \"description\": \"manager of this user\"\n}'"))))}h.isMDXComponent=!0}}]);