"use strict";(globalThis.webpackChunkshield=globalThis.webpackChunkshield||[]).push([[743],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>h});var n=t(6540);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,i=function(e,r){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(i[t]=e[t]);return i}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=i,h=u["".concat(c,".").concat(d)]||u[d]||y[d]||o;return t?n.createElement(h,a(a({ref:r},p),{},{components:t})):n.createElement(h,a({ref:r},p))}));function h(e,r){var t=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=d;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6208:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=t(8168),i=(t(6540),t(5680));const o={},a="Glossary",s={unversionedId:"concepts/glossary",id:"concepts/glossary",title:"Glossary",description:"Backend",source:"@site/docs/concepts/glossary.md",sourceDirName:"concepts",slug:"/concepts/glossary",permalink:"/shield/concepts/glossary",draft:!1,editUrl:"https://github.com/goto/shield/edit/master/docs/docs/concepts/glossary.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Architecture",permalink:"/shield/concepts/architecture"},next:{title:"Introduction",permalink:"/shield/tour/intro"}},c={},l=[{value:"Backend",id:"backend",level:2},{value:"Permission",id:"permission",level:2},{value:"Principal",id:"principal",level:2},{value:"Resource",id:"resource",level:2},{value:"Resource Type",id:"resource-type",level:2},{value:"Project",id:"project",level:2},{value:"Organization",id:"organization",level:2},{value:"Namespace",id:"namespace",level:2},{value:"Role",id:"role",level:2},{value:"Policy",id:"policy",level:2},{value:"Entity",id:"entity",level:2},{value:"Spicedb",id:"spicedb",level:2}],p={toc:l};function u(e){let{components:r,...t}=e;return(0,i.yg)("wrapper",(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"glossary"},"Glossary"),(0,i.yg)("h2",{id:"backend"},"Backend"),(0,i.yg)("p",null,"External Service which wants to use Shield for authz. It can verify access via Shield Proxy & API."),(0,i.yg)("h2",{id:"permission"},"Permission"),(0,i.yg)("p",null,"Ability to carry out any action, in Shield or configured Backends."),(0,i.yg)("h2",{id:"principal"},"Principal"),(0,i.yg)("p",null,"To whom we can grant Permission to. They can be of types:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"User: A person or service account who can be a Principal. It is identified by Email ID."),(0,i.yg)("li",{parentName:"ol"},"Group: Collection of Users."),(0,i.yg)("li",{parentName:"ol"},"All Registered Users: Collection of users who have registered in Shield. Any user who registers in Shield becomes part of this Principal.")),(0,i.yg)("h2",{id:"resource"},"Resource"),(0,i.yg)("p",null,"Entity which needs authorization to be accessed. For example, a GCE instance is a resource over which we need permission such as edit & view."),(0,i.yg)("h2",{id:"resource-type"},"Resource Type"),(0,i.yg)("p",null,"Classification that contains Resource instances. For example, GCE can be a resource type for GCE instances."),(0,i.yg)("h2",{id:"project"},"Project"),(0,i.yg)("p",null,"By which we can group Resources, of various different Resource Types, who have common environment."),(0,i.yg)("h2",{id:"organization"},"Organization"),(0,i.yg)("p",null,"Organization is the root node in the hierarchy of Resources, being a collection of Projects."),(0,i.yg)("h2",{id:"namespace"},"Namespace"),(0,i.yg)("p",null,"Type of objects over which we want authorization. They are of two types:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"System Namespace: Objects like Organization, Project & Team, over which we need authorization to actions such as adding user to team, adding user as owner of project.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Resource Namespace: Resources Types over which we need authorization. For example, we need edit & view permissions over GCE Instances."))),(0,i.yg)("h2",{id:"role"},"Role"),(0,i.yg)("p",null,"Its an IAM Identity that describes what are the permissions one Principal has."),(0,i.yg)("h2",{id:"policy"},"Policy"),(0,i.yg)("p",null,"Defines what Permission does a Role have."),(0,i.yg)("h2",{id:"entity"},"Entity"),(0,i.yg)("p",null,"Instance of a namespace."),(0,i.yg)("h2",{id:"spicedb"},"Spicedb"),(0,i.yg)("p",null,(0,i.yg)("a",{parentName:"p",href:"https://github.com/authzed/spicedb"},"SpiceDB")," is a Zanzibar-inspired open source database system for managing security-critical application permissions."))}u.isMDXComponent=!0}}]);