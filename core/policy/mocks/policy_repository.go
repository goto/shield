// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	policy "github.com/goto/shield/core/policy"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, id
func (_m *Repository) Get(ctx context.Context, id string) (policy.Policy, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 policy.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (policy.Policy, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) policy.Policy); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(policy.Policy)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *Repository_Expecter) Get(ctx interface{}, id interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *Repository_Get_Call) Run(run func(ctx context.Context, id string)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 policy.Policy, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call) RunAndReturn(run func(context.Context, string) (policy.Policy, error)) *Repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *Repository) List(ctx context.Context) ([]policy.Policy, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []policy.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]policy.Policy, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []policy.Policy); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]policy.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Repository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) List(ctx interface{}) *Repository_List_Call {
	return &Repository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *Repository_List_Call) Run(run func(ctx context.Context)) *Repository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_List_Call) Return(_a0 []policy.Policy, _a1 error) *Repository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_List_Call) RunAndReturn(run func(context.Context) ([]policy.Policy, error)) *Repository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, pol
func (_m *Repository) Update(ctx context.Context, pol *policy.Policy) (string, error) {
	ret := _m.Called(ctx, pol)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *policy.Policy) (string, error)); ok {
		return rf(ctx, pol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *policy.Policy) string); ok {
		r0 = rf(ctx, pol)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *policy.Policy) error); ok {
		r1 = rf(ctx, pol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - pol *policy.Policy
func (_e *Repository_Expecter) Update(ctx interface{}, pol interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", ctx, pol)}
}

func (_c *Repository_Update_Call) Run(run func(ctx context.Context, pol *policy.Policy)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*policy.Policy))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 string, _a1 error) *Repository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(context.Context, *policy.Policy) (string, error)) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, pol
func (_m *Repository) Upsert(ctx context.Context, pol *policy.Policy) (string, error) {
	ret := _m.Called(ctx, pol)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *policy.Policy) (string, error)); ok {
		return rf(ctx, pol)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *policy.Policy) string); ok {
		r0 = rf(ctx, pol)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *policy.Policy) error); ok {
		r1 = rf(ctx, pol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type Repository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - pol *policy.Policy
func (_e *Repository_Expecter) Upsert(ctx interface{}, pol interface{}) *Repository_Upsert_Call {
	return &Repository_Upsert_Call{Call: _e.mock.On("Upsert", ctx, pol)}
}

func (_c *Repository_Upsert_Call) Run(run func(ctx context.Context, pol *policy.Policy)) *Repository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*policy.Policy))
	})
	return _c
}

func (_c *Repository_Upsert_Call) Return(_a0 string, _a1 error) *Repository_Upsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Upsert_Call) RunAndReturn(run func(context.Context, *policy.Policy) (string, error)) *Repository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
