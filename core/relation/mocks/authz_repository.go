// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	action "github.com/goto/shield/core/action"

	mock "github.com/stretchr/testify/mock"

	relation "github.com/goto/shield/core/relation"
)

// AuthzRepository is an autogenerated mock type for the AuthzRepository type
type AuthzRepository struct {
	mock.Mock
}

type AuthzRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthzRepository) EXPECT() *AuthzRepository_Expecter {
	return &AuthzRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, rel
func (_m *AuthzRepository) Add(ctx context.Context, rel relation.Relation) error {
	ret := _m.Called(ctx, rel)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, relation.Relation) error); ok {
		r0 = rf(ctx, rel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthzRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type AuthzRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - rel relation.Relation
func (_e *AuthzRepository_Expecter) Add(ctx interface{}, rel interface{}) *AuthzRepository_Add_Call {
	return &AuthzRepository_Add_Call{Call: _e.mock.On("Add", ctx, rel)}
}

func (_c *AuthzRepository_Add_Call) Run(run func(ctx context.Context, rel relation.Relation)) *AuthzRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.Relation))
	})
	return _c
}

func (_c *AuthzRepository_Add_Call) Return(_a0 error) *AuthzRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthzRepository_Add_Call) RunAndReturn(run func(context.Context, relation.Relation) error) *AuthzRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddV2 provides a mock function with given fields: ctx, rel
func (_m *AuthzRepository) AddV2(ctx context.Context, rel relation.RelationV2) error {
	ret := _m.Called(ctx, rel)

	if len(ret) == 0 {
		panic("no return value specified for AddV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, relation.RelationV2) error); ok {
		r0 = rf(ctx, rel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthzRepository_AddV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddV2'
type AuthzRepository_AddV2_Call struct {
	*mock.Call
}

// AddV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - rel relation.RelationV2
func (_e *AuthzRepository_Expecter) AddV2(ctx interface{}, rel interface{}) *AuthzRepository_AddV2_Call {
	return &AuthzRepository_AddV2_Call{Call: _e.mock.On("AddV2", ctx, rel)}
}

func (_c *AuthzRepository_AddV2_Call) Run(run func(ctx context.Context, rel relation.RelationV2)) *AuthzRepository_AddV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.RelationV2))
	})
	return _c
}

func (_c *AuthzRepository_AddV2_Call) Return(_a0 error) *AuthzRepository_AddV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthzRepository_AddV2_Call) RunAndReturn(run func(context.Context, relation.RelationV2) error) *AuthzRepository_AddV2_Call {
	_c.Call.Return(run)
	return _c
}

// BulkCheck provides a mock function with given fields: ctx, rels, acts
func (_m *AuthzRepository) BulkCheck(ctx context.Context, rels []relation.Relation, acts []action.Action) ([]relation.Permission, error) {
	ret := _m.Called(ctx, rels, acts)

	if len(ret) == 0 {
		panic("no return value specified for BulkCheck")
	}

	var r0 []relation.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []relation.Relation, []action.Action) ([]relation.Permission, error)); ok {
		return rf(ctx, rels, acts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []relation.Relation, []action.Action) []relation.Permission); ok {
		r0 = rf(ctx, rels, acts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relation.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []relation.Relation, []action.Action) error); ok {
		r1 = rf(ctx, rels, acts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthzRepository_BulkCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCheck'
type AuthzRepository_BulkCheck_Call struct {
	*mock.Call
}

// BulkCheck is a helper method to define mock.On call
//   - ctx context.Context
//   - rels []relation.Relation
//   - acts []action.Action
func (_e *AuthzRepository_Expecter) BulkCheck(ctx interface{}, rels interface{}, acts interface{}) *AuthzRepository_BulkCheck_Call {
	return &AuthzRepository_BulkCheck_Call{Call: _e.mock.On("BulkCheck", ctx, rels, acts)}
}

func (_c *AuthzRepository_BulkCheck_Call) Run(run func(ctx context.Context, rels []relation.Relation, acts []action.Action)) *AuthzRepository_BulkCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]relation.Relation), args[2].([]action.Action))
	})
	return _c
}

func (_c *AuthzRepository_BulkCheck_Call) Return(_a0 []relation.Permission, _a1 error) *AuthzRepository_BulkCheck_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthzRepository_BulkCheck_Call) RunAndReturn(run func(context.Context, []relation.Relation, []action.Action) ([]relation.Permission, error)) *AuthzRepository_BulkCheck_Call {
	_c.Call.Return(run)
	return _c
}

// Check provides a mock function with given fields: ctx, rel, act
func (_m *AuthzRepository) Check(ctx context.Context, rel relation.Relation, act action.Action) (bool, error) {
	ret := _m.Called(ctx, rel, act)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, relation.Relation, action.Action) (bool, error)); ok {
		return rf(ctx, rel, act)
	}
	if rf, ok := ret.Get(0).(func(context.Context, relation.Relation, action.Action) bool); ok {
		r0 = rf(ctx, rel, act)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, relation.Relation, action.Action) error); ok {
		r1 = rf(ctx, rel, act)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthzRepository_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type AuthzRepository_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - rel relation.Relation
//   - act action.Action
func (_e *AuthzRepository_Expecter) Check(ctx interface{}, rel interface{}, act interface{}) *AuthzRepository_Check_Call {
	return &AuthzRepository_Check_Call{Call: _e.mock.On("Check", ctx, rel, act)}
}

func (_c *AuthzRepository_Check_Call) Run(run func(ctx context.Context, rel relation.Relation, act action.Action)) *AuthzRepository_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.Relation), args[2].(action.Action))
	})
	return _c
}

func (_c *AuthzRepository_Check_Call) Return(_a0 bool, _a1 error) *AuthzRepository_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthzRepository_Check_Call) RunAndReturn(run func(context.Context, relation.Relation, action.Action) (bool, error)) *AuthzRepository_Check_Call {
	_c.Call.Return(run)
	return _c
}

// CheckIsPublic provides a mock function with given fields: ctx, rel, act
func (_m *AuthzRepository) CheckIsPublic(ctx context.Context, rel relation.Relation, act action.Action) (bool, error) {
	ret := _m.Called(ctx, rel, act)

	if len(ret) == 0 {
		panic("no return value specified for CheckIsPublic")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, relation.Relation, action.Action) (bool, error)); ok {
		return rf(ctx, rel, act)
	}
	if rf, ok := ret.Get(0).(func(context.Context, relation.Relation, action.Action) bool); ok {
		r0 = rf(ctx, rel, act)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, relation.Relation, action.Action) error); ok {
		r1 = rf(ctx, rel, act)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthzRepository_CheckIsPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIsPublic'
type AuthzRepository_CheckIsPublic_Call struct {
	*mock.Call
}

// CheckIsPublic is a helper method to define mock.On call
//   - ctx context.Context
//   - rel relation.Relation
//   - act action.Action
func (_e *AuthzRepository_Expecter) CheckIsPublic(ctx interface{}, rel interface{}, act interface{}) *AuthzRepository_CheckIsPublic_Call {
	return &AuthzRepository_CheckIsPublic_Call{Call: _e.mock.On("CheckIsPublic", ctx, rel, act)}
}

func (_c *AuthzRepository_CheckIsPublic_Call) Run(run func(ctx context.Context, rel relation.Relation, act action.Action)) *AuthzRepository_CheckIsPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.Relation), args[2].(action.Action))
	})
	return _c
}

func (_c *AuthzRepository_CheckIsPublic_Call) Return(_a0 bool, _a1 error) *AuthzRepository_CheckIsPublic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthzRepository_CheckIsPublic_Call) RunAndReturn(run func(context.Context, relation.Relation, action.Action) (bool, error)) *AuthzRepository_CheckIsPublic_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubjectRelations provides a mock function with given fields: ctx, resourceType, optionalResourceID
func (_m *AuthzRepository) DeleteSubjectRelations(ctx context.Context, resourceType string, optionalResourceID string) error {
	ret := _m.Called(ctx, resourceType, optionalResourceID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubjectRelations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, resourceType, optionalResourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthzRepository_DeleteSubjectRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubjectRelations'
type AuthzRepository_DeleteSubjectRelations_Call struct {
	*mock.Call
}

// DeleteSubjectRelations is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceType string
//   - optionalResourceID string
func (_e *AuthzRepository_Expecter) DeleteSubjectRelations(ctx interface{}, resourceType interface{}, optionalResourceID interface{}) *AuthzRepository_DeleteSubjectRelations_Call {
	return &AuthzRepository_DeleteSubjectRelations_Call{Call: _e.mock.On("DeleteSubjectRelations", ctx, resourceType, optionalResourceID)}
}

func (_c *AuthzRepository_DeleteSubjectRelations_Call) Run(run func(ctx context.Context, resourceType string, optionalResourceID string)) *AuthzRepository_DeleteSubjectRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthzRepository_DeleteSubjectRelations_Call) Return(_a0 error) *AuthzRepository_DeleteSubjectRelations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthzRepository_DeleteSubjectRelations_Call) RunAndReturn(run func(context.Context, string, string) error) *AuthzRepository_DeleteSubjectRelations_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteV2 provides a mock function with given fields: ctx, rel
func (_m *AuthzRepository) DeleteV2(ctx context.Context, rel relation.RelationV2) error {
	ret := _m.Called(ctx, rel)

	if len(ret) == 0 {
		panic("no return value specified for DeleteV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, relation.RelationV2) error); ok {
		r0 = rf(ctx, rel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthzRepository_DeleteV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteV2'
type AuthzRepository_DeleteV2_Call struct {
	*mock.Call
}

// DeleteV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - rel relation.RelationV2
func (_e *AuthzRepository_Expecter) DeleteV2(ctx interface{}, rel interface{}) *AuthzRepository_DeleteV2_Call {
	return &AuthzRepository_DeleteV2_Call{Call: _e.mock.On("DeleteV2", ctx, rel)}
}

func (_c *AuthzRepository_DeleteV2_Call) Run(run func(ctx context.Context, rel relation.RelationV2)) *AuthzRepository_DeleteV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.RelationV2))
	})
	return _c
}

func (_c *AuthzRepository_DeleteV2_Call) Return(_a0 error) *AuthzRepository_DeleteV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthzRepository_DeleteV2_Call) RunAndReturn(run func(context.Context, relation.RelationV2) error) *AuthzRepository_DeleteV2_Call {
	_c.Call.Return(run)
	return _c
}

// LookupResources provides a mock function with given fields: ctx, resourceType, permission, subjectType, subjectID
func (_m *AuthzRepository) LookupResources(ctx context.Context, resourceType string, permission string, subjectType string, subjectID string) ([]string, error) {
	ret := _m.Called(ctx, resourceType, permission, subjectType, subjectID)

	if len(ret) == 0 {
		panic("no return value specified for LookupResources")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) ([]string, error)); ok {
		return rf(ctx, resourceType, permission, subjectType, subjectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) []string); ok {
		r0 = rf(ctx, resourceType, permission, subjectType, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, resourceType, permission, subjectType, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthzRepository_LookupResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupResources'
type AuthzRepository_LookupResources_Call struct {
	*mock.Call
}

// LookupResources is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceType string
//   - permission string
//   - subjectType string
//   - subjectID string
func (_e *AuthzRepository_Expecter) LookupResources(ctx interface{}, resourceType interface{}, permission interface{}, subjectType interface{}, subjectID interface{}) *AuthzRepository_LookupResources_Call {
	return &AuthzRepository_LookupResources_Call{Call: _e.mock.On("LookupResources", ctx, resourceType, permission, subjectType, subjectID)}
}

func (_c *AuthzRepository_LookupResources_Call) Run(run func(ctx context.Context, resourceType string, permission string, subjectType string, subjectID string)) *AuthzRepository_LookupResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AuthzRepository_LookupResources_Call) Return(_a0 []string, _a1 error) *AuthzRepository_LookupResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthzRepository_LookupResources_Call) RunAndReturn(run func(context.Context, string, string, string, string) ([]string, error)) *AuthzRepository_LookupResources_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthzRepository creates a new instance of AuthzRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthzRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthzRepository {
	mock := &AuthzRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
