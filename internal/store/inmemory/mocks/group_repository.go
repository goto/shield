// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	group "github.com/goto/shield/core/group"
	mock "github.com/stretchr/testify/mock"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

type GroupRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupRepository) EXPECT() *GroupRepository_Expecter {
	return &GroupRepository_Expecter{mock: &_m.Mock}
}

// GetBySlug provides a mock function with given fields: ctx, slug
func (_m *GroupRepository) GetBySlug(ctx context.Context, slug string) (group.Group, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetBySlug")
	}

	var r0 group.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (group.Group, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) group.Group); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(group.Group)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupRepository_GetBySlug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySlug'
type GroupRepository_GetBySlug_Call struct {
	*mock.Call
}

// GetBySlug is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
func (_e *GroupRepository_Expecter) GetBySlug(ctx interface{}, slug interface{}) *GroupRepository_GetBySlug_Call {
	return &GroupRepository_GetBySlug_Call{Call: _e.mock.On("GetBySlug", ctx, slug)}
}

func (_c *GroupRepository_GetBySlug_Call) Run(run func(ctx context.Context, slug string)) *GroupRepository_GetBySlug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GroupRepository_GetBySlug_Call) Return(_a0 group.Group, _a1 error) *GroupRepository_GetBySlug_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GroupRepository_GetBySlug_Call) RunAndReturn(run func(context.Context, string) (group.Group, error)) *GroupRepository_GetBySlug_Call {
	_c.Call.Return(run)
	return _c
}

// NewGroupRepository creates a new instance of GroupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupRepository {
	mock := &GroupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
