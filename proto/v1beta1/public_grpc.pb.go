// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gotocompany/shield/v1beta1/public.proto

package shieldv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShieldPublicService_CreateServiceDataKey_FullMethodName   = "/gotocompany.shield.v1beta1.ShieldPublicService/CreateServiceDataKey"
	ShieldPublicService_UpsertUserServiceData_FullMethodName  = "/gotocompany.shield.v1beta1.ShieldPublicService/UpsertUserServiceData"
	ShieldPublicService_UpsertGroupServiceData_FullMethodName = "/gotocompany.shield.v1beta1.ShieldPublicService/UpsertGroupServiceData"
)

// ShieldPublicServiceClient is the client API for ShieldPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShieldPublicServiceClient interface {
	// Service Data
	CreateServiceDataKey(ctx context.Context, in *CreateServiceDataKeyRequest, opts ...grpc.CallOption) (*CreateServiceDataKeyResponse, error)
	UpsertUserServiceData(ctx context.Context, in *UpsertUserServiceDataRequest, opts ...grpc.CallOption) (*UpsertUserServiceDataResponse, error)
	UpsertGroupServiceData(ctx context.Context, in *UpsertGroupServiceDataRequest, opts ...grpc.CallOption) (*UpsertGroupServiceDataResponse, error)
}

type shieldPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShieldPublicServiceClient(cc grpc.ClientConnInterface) ShieldPublicServiceClient {
	return &shieldPublicServiceClient{cc}
}

func (c *shieldPublicServiceClient) CreateServiceDataKey(ctx context.Context, in *CreateServiceDataKeyRequest, opts ...grpc.CallOption) (*CreateServiceDataKeyResponse, error) {
	out := new(CreateServiceDataKeyResponse)
	err := c.cc.Invoke(ctx, ShieldPublicService_CreateServiceDataKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldPublicServiceClient) UpsertUserServiceData(ctx context.Context, in *UpsertUserServiceDataRequest, opts ...grpc.CallOption) (*UpsertUserServiceDataResponse, error) {
	out := new(UpsertUserServiceDataResponse)
	err := c.cc.Invoke(ctx, ShieldPublicService_UpsertUserServiceData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shieldPublicServiceClient) UpsertGroupServiceData(ctx context.Context, in *UpsertGroupServiceDataRequest, opts ...grpc.CallOption) (*UpsertGroupServiceDataResponse, error) {
	out := new(UpsertGroupServiceDataResponse)
	err := c.cc.Invoke(ctx, ShieldPublicService_UpsertGroupServiceData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShieldPublicServiceServer is the server API for ShieldPublicService service.
// All implementations must embed UnimplementedShieldPublicServiceServer
// for forward compatibility
type ShieldPublicServiceServer interface {
	// Service Data
	CreateServiceDataKey(context.Context, *CreateServiceDataKeyRequest) (*CreateServiceDataKeyResponse, error)
	UpsertUserServiceData(context.Context, *UpsertUserServiceDataRequest) (*UpsertUserServiceDataResponse, error)
	UpsertGroupServiceData(context.Context, *UpsertGroupServiceDataRequest) (*UpsertGroupServiceDataResponse, error)
	mustEmbedUnimplementedShieldPublicServiceServer()
}

// UnimplementedShieldPublicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShieldPublicServiceServer struct {
}

func (UnimplementedShieldPublicServiceServer) CreateServiceDataKey(context.Context, *CreateServiceDataKeyRequest) (*CreateServiceDataKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceDataKey not implemented")
}
func (UnimplementedShieldPublicServiceServer) UpsertUserServiceData(context.Context, *UpsertUserServiceDataRequest) (*UpsertUserServiceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUserServiceData not implemented")
}
func (UnimplementedShieldPublicServiceServer) UpsertGroupServiceData(context.Context, *UpsertGroupServiceDataRequest) (*UpsertGroupServiceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertGroupServiceData not implemented")
}
func (UnimplementedShieldPublicServiceServer) mustEmbedUnimplementedShieldPublicServiceServer() {}

// UnsafeShieldPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShieldPublicServiceServer will
// result in compilation errors.
type UnsafeShieldPublicServiceServer interface {
	mustEmbedUnimplementedShieldPublicServiceServer()
}

func RegisterShieldPublicServiceServer(s grpc.ServiceRegistrar, srv ShieldPublicServiceServer) {
	s.RegisterService(&ShieldPublicService_ServiceDesc, srv)
}

func _ShieldPublicService_CreateServiceDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceDataKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldPublicServiceServer).CreateServiceDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldPublicService_CreateServiceDataKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldPublicServiceServer).CreateServiceDataKey(ctx, req.(*CreateServiceDataKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldPublicService_UpsertUserServiceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertUserServiceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldPublicServiceServer).UpsertUserServiceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldPublicService_UpsertUserServiceData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldPublicServiceServer).UpsertUserServiceData(ctx, req.(*UpsertUserServiceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShieldPublicService_UpsertGroupServiceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertGroupServiceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShieldPublicServiceServer).UpsertGroupServiceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShieldPublicService_UpsertGroupServiceData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShieldPublicServiceServer).UpsertGroupServiceData(ctx, req.(*UpsertGroupServiceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShieldPublicService_ServiceDesc is the grpc.ServiceDesc for ShieldPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShieldPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gotocompany.shield.v1beta1.ShieldPublicService",
	HandlerType: (*ShieldPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceDataKey",
			Handler:    _ShieldPublicService_CreateServiceDataKey_Handler,
		},
		{
			MethodName: "UpsertUserServiceData",
			Handler:    _ShieldPublicService_UpsertUserServiceData_Handler,
		},
		{
			MethodName: "UpsertGroupServiceData",
			Handler:    _ShieldPublicService_UpsertGroupServiceData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gotocompany/shield/v1beta1/public.proto",
}
