// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	resource "github.com/goto/shield/core/resource"
	mock "github.com/stretchr/testify/mock"
)

// ResourceService is an autogenerated mock type for the ResourceService type
type ResourceService struct {
	mock.Mock
}

type ResourceService_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceService) EXPECT() *ResourceService_Expecter {
	return &ResourceService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, res
func (_m *ResourceService) Create(ctx context.Context, res resource.Resource) (resource.Resource, error) {
	ret := _m.Called(ctx, res)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 resource.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resource.Resource) (resource.Resource, error)); ok {
		return rf(ctx, res)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resource.Resource) resource.Resource); ok {
		r0 = rf(ctx, res)
	} else {
		r0 = ret.Get(0).(resource.Resource)
	}

	if rf, ok := ret.Get(1).(func(context.Context, resource.Resource) error); ok {
		r1 = rf(ctx, res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ResourceService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - res resource.Resource
func (_e *ResourceService_Expecter) Create(ctx interface{}, res interface{}) *ResourceService_Create_Call {
	return &ResourceService_Create_Call{Call: _e.mock.On("Create", ctx, res)}
}

func (_c *ResourceService_Create_Call) Run(run func(ctx context.Context, res resource.Resource)) *ResourceService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resource.Resource))
	})
	return _c
}

func (_c *ResourceService_Create_Call) Return(_a0 resource.Resource, _a1 error) *ResourceService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceService_Create_Call) RunAndReturn(run func(context.Context, resource.Resource) (resource.Resource, error)) *ResourceService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByURN provides a mock function with given fields: ctx, urn
func (_m *ResourceService) GetByURN(ctx context.Context, urn string) (resource.Resource, error) {
	ret := _m.Called(ctx, urn)

	if len(ret) == 0 {
		panic("no return value specified for GetByURN")
	}

	var r0 resource.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (resource.Resource, error)); ok {
		return rf(ctx, urn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) resource.Resource); ok {
		r0 = rf(ctx, urn)
	} else {
		r0 = ret.Get(0).(resource.Resource)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, urn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceService_GetByURN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByURN'
type ResourceService_GetByURN_Call struct {
	*mock.Call
}

// GetByURN is a helper method to define mock.On call
//   - ctx context.Context
//   - urn string
func (_e *ResourceService_Expecter) GetByURN(ctx interface{}, urn interface{}) *ResourceService_GetByURN_Call {
	return &ResourceService_GetByURN_Call{Call: _e.mock.On("GetByURN", ctx, urn)}
}

func (_c *ResourceService_GetByURN_Call) Run(run func(ctx context.Context, urn string)) *ResourceService_GetByURN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ResourceService_GetByURN_Call) Return(_a0 resource.Resource, _a1 error) *ResourceService_GetByURN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceService_GetByURN_Call) RunAndReturn(run func(context.Context, string) (resource.Resource, error)) *ResourceService_GetByURN_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceService creates a new instance of ResourceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceService {
	mock := &ResourceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
