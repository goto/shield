// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	action "github.com/goto/shield/core/action"

	mock "github.com/stretchr/testify/mock"

	namespace "github.com/goto/shield/core/namespace"

	relation "github.com/goto/shield/core/relation"

	user "github.com/goto/shield/core/user"
)

// RelationService is an autogenerated mock type for the RelationService type
type RelationService struct {
	mock.Mock
}

type RelationService_Expecter struct {
	mock *mock.Mock
}

func (_m *RelationService) EXPECT() *RelationService_Expecter {
	return &RelationService_Expecter{mock: &_m.Mock}
}

// CheckIsPublic provides a mock function with given fields: ctx, resourceNS, resourceIdxa, _a3
func (_m *RelationService) CheckIsPublic(ctx context.Context, resourceNS namespace.Namespace, resourceIdxa string, _a3 action.Action) (bool, error) {
	ret := _m.Called(ctx, resourceNS, resourceIdxa, _a3)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, namespace.Namespace, string, action.Action) (bool, error)); ok {
		return rf(ctx, resourceNS, resourceIdxa, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, namespace.Namespace, string, action.Action) bool); ok {
		r0 = rf(ctx, resourceNS, resourceIdxa, _a3)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, namespace.Namespace, string, action.Action) error); ok {
		r1 = rf(ctx, resourceNS, resourceIdxa, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_CheckIsPublic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIsPublic'
type RelationService_CheckIsPublic_Call struct {
	*mock.Call
}

// CheckIsPublic is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceNS namespace.Namespace
//   - resourceIdxa string
//   - _a3 action.Action
func (_e *RelationService_Expecter) CheckIsPublic(ctx interface{}, resourceNS interface{}, resourceIdxa interface{}, _a3 interface{}) *RelationService_CheckIsPublic_Call {
	return &RelationService_CheckIsPublic_Call{Call: _e.mock.On("CheckIsPublic", ctx, resourceNS, resourceIdxa, _a3)}
}

func (_c *RelationService_CheckIsPublic_Call) Run(run func(ctx context.Context, resourceNS namespace.Namespace, resourceIdxa string, _a3 action.Action)) *RelationService_CheckIsPublic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(namespace.Namespace), args[2].(string), args[3].(action.Action))
	})
	return _c
}

func (_c *RelationService_CheckIsPublic_Call) Return(_a0 bool, _a1 error) *RelationService_CheckIsPublic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RelationService_CheckIsPublic_Call) RunAndReturn(run func(context.Context, namespace.Namespace, string, action.Action) (bool, error)) *RelationService_CheckIsPublic_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPermission provides a mock function with given fields: ctx, usr, resourceNS, resourceIdxa, _a4
func (_m *RelationService) CheckPermission(ctx context.Context, usr user.User, resourceNS namespace.Namespace, resourceIdxa string, _a4 action.Action) (bool, error) {
	ret := _m.Called(ctx, usr, resourceNS, resourceIdxa, _a4)

	if len(ret) == 0 {
		panic("no return value specified for CheckPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User, namespace.Namespace, string, action.Action) (bool, error)); ok {
		return rf(ctx, usr, resourceNS, resourceIdxa, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.User, namespace.Namespace, string, action.Action) bool); ok {
		r0 = rf(ctx, usr, resourceNS, resourceIdxa, _a4)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.User, namespace.Namespace, string, action.Action) error); ok {
		r1 = rf(ctx, usr, resourceNS, resourceIdxa, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_CheckPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPermission'
type RelationService_CheckPermission_Call struct {
	*mock.Call
}

// CheckPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - usr user.User
//   - resourceNS namespace.Namespace
//   - resourceIdxa string
//   - _a4 action.Action
func (_e *RelationService_Expecter) CheckPermission(ctx interface{}, usr interface{}, resourceNS interface{}, resourceIdxa interface{}, _a4 interface{}) *RelationService_CheckPermission_Call {
	return &RelationService_CheckPermission_Call{Call: _e.mock.On("CheckPermission", ctx, usr, resourceNS, resourceIdxa, _a4)}
}

func (_c *RelationService_CheckPermission_Call) Run(run func(ctx context.Context, usr user.User, resourceNS namespace.Namespace, resourceIdxa string, _a4 action.Action)) *RelationService_CheckPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user.User), args[2].(namespace.Namespace), args[3].(string), args[4].(action.Action))
	})
	return _c
}

func (_c *RelationService_CheckPermission_Call) Return(_a0 bool, _a1 error) *RelationService_CheckPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RelationService_CheckPermission_Call) RunAndReturn(run func(context.Context, user.User, namespace.Namespace, string, action.Action) (bool, error)) *RelationService_CheckPermission_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, rel
func (_m *RelationService) Create(ctx context.Context, rel relation.RelationV2) (relation.RelationV2, error) {
	ret := _m.Called(ctx, rel)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 relation.RelationV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, relation.RelationV2) (relation.RelationV2, error)); ok {
		return rf(ctx, rel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, relation.RelationV2) relation.RelationV2); ok {
		r0 = rf(ctx, rel)
	} else {
		r0 = ret.Get(0).(relation.RelationV2)
	}

	if rf, ok := ret.Get(1).(func(context.Context, relation.RelationV2) error); ok {
		r1 = rf(ctx, rel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RelationService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - rel relation.RelationV2
func (_e *RelationService_Expecter) Create(ctx interface{}, rel interface{}) *RelationService_Create_Call {
	return &RelationService_Create_Call{Call: _e.mock.On("Create", ctx, rel)}
}

func (_c *RelationService_Create_Call) Run(run func(ctx context.Context, rel relation.RelationV2)) *RelationService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.RelationV2))
	})
	return _c
}

func (_c *RelationService_Create_Call) Return(_a0 relation.RelationV2, _a1 error) *RelationService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RelationService_Create_Call) RunAndReturn(run func(context.Context, relation.RelationV2) (relation.RelationV2, error)) *RelationService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteV2 provides a mock function with given fields: ctx, rel
func (_m *RelationService) DeleteV2(ctx context.Context, rel relation.RelationV2) error {
	ret := _m.Called(ctx, rel)

	if len(ret) == 0 {
		panic("no return value specified for DeleteV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, relation.RelationV2) error); ok {
		r0 = rf(ctx, rel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RelationService_DeleteV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteV2'
type RelationService_DeleteV2_Call struct {
	*mock.Call
}

// DeleteV2 is a helper method to define mock.On call
//   - ctx context.Context
//   - rel relation.RelationV2
func (_e *RelationService_Expecter) DeleteV2(ctx interface{}, rel interface{}) *RelationService_DeleteV2_Call {
	return &RelationService_DeleteV2_Call{Call: _e.mock.On("DeleteV2", ctx, rel)}
}

func (_c *RelationService_DeleteV2_Call) Run(run func(ctx context.Context, rel relation.RelationV2)) *RelationService_DeleteV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.RelationV2))
	})
	return _c
}

func (_c *RelationService_DeleteV2_Call) Return(_a0 error) *RelationService_DeleteV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RelationService_DeleteV2_Call) RunAndReturn(run func(context.Context, relation.RelationV2) error) *RelationService_DeleteV2_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *RelationService) Get(ctx context.Context, id string) (relation.RelationV2, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 relation.RelationV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (relation.RelationV2, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) relation.RelationV2); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(relation.RelationV2)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RelationService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RelationService_Expecter) Get(ctx interface{}, id interface{}) *RelationService_Get_Call {
	return &RelationService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *RelationService_Get_Call) Run(run func(ctx context.Context, id string)) *RelationService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RelationService_Get_Call) Return(_a0 relation.RelationV2, _a1 error) *RelationService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RelationService_Get_Call) RunAndReturn(run func(context.Context, string) (relation.RelationV2, error)) *RelationService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetRelationByFields provides a mock function with given fields: ctx, rel
func (_m *RelationService) GetRelationByFields(ctx context.Context, rel relation.RelationV2) (relation.RelationV2, error) {
	ret := _m.Called(ctx, rel)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationByFields")
	}

	var r0 relation.RelationV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, relation.RelationV2) (relation.RelationV2, error)); ok {
		return rf(ctx, rel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, relation.RelationV2) relation.RelationV2); ok {
		r0 = rf(ctx, rel)
	} else {
		r0 = ret.Get(0).(relation.RelationV2)
	}

	if rf, ok := ret.Get(1).(func(context.Context, relation.RelationV2) error); ok {
		r1 = rf(ctx, rel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_GetRelationByFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRelationByFields'
type RelationService_GetRelationByFields_Call struct {
	*mock.Call
}

// GetRelationByFields is a helper method to define mock.On call
//   - ctx context.Context
//   - rel relation.RelationV2
func (_e *RelationService_Expecter) GetRelationByFields(ctx interface{}, rel interface{}) *RelationService_GetRelationByFields_Call {
	return &RelationService_GetRelationByFields_Call{Call: _e.mock.On("GetRelationByFields", ctx, rel)}
}

func (_c *RelationService_GetRelationByFields_Call) Run(run func(ctx context.Context, rel relation.RelationV2)) *RelationService_GetRelationByFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(relation.RelationV2))
	})
	return _c
}

func (_c *RelationService_GetRelationByFields_Call) Return(_a0 relation.RelationV2, _a1 error) *RelationService_GetRelationByFields_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RelationService_GetRelationByFields_Call) RunAndReturn(run func(context.Context, relation.RelationV2) (relation.RelationV2, error)) *RelationService_GetRelationByFields_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *RelationService) List(ctx context.Context) ([]relation.RelationV2, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []relation.RelationV2
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]relation.RelationV2, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []relation.RelationV2); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]relation.RelationV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RelationService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RelationService_Expecter) List(ctx interface{}) *RelationService_List_Call {
	return &RelationService_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *RelationService_List_Call) Run(run func(ctx context.Context)) *RelationService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RelationService_List_Call) Return(_a0 []relation.RelationV2, _a1 error) *RelationService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RelationService_List_Call) RunAndReturn(run func(context.Context) ([]relation.RelationV2, error)) *RelationService_List_Call {
	_c.Call.Return(run)
	return _c
}

// LookupResources provides a mock function with given fields: ctx, resourceType, permission, subjectType, subjectID
func (_m *RelationService) LookupResources(ctx context.Context, resourceType string, permission string, subjectType string, subjectID string) ([]string, error) {
	ret := _m.Called(ctx, resourceType, permission, subjectType, subjectID)

	if len(ret) == 0 {
		panic("no return value specified for LookupResources")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) ([]string, error)); ok {
		return rf(ctx, resourceType, permission, subjectType, subjectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) []string); ok {
		r0 = rf(ctx, resourceType, permission, subjectType, subjectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, resourceType, permission, subjectType, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelationService_LookupResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupResources'
type RelationService_LookupResources_Call struct {
	*mock.Call
}

// LookupResources is a helper method to define mock.On call
//   - ctx context.Context
//   - resourceType string
//   - permission string
//   - subjectType string
//   - subjectID string
func (_e *RelationService_Expecter) LookupResources(ctx interface{}, resourceType interface{}, permission interface{}, subjectType interface{}, subjectID interface{}) *RelationService_LookupResources_Call {
	return &RelationService_LookupResources_Call{Call: _e.mock.On("LookupResources", ctx, resourceType, permission, subjectType, subjectID)}
}

func (_c *RelationService_LookupResources_Call) Run(run func(ctx context.Context, resourceType string, permission string, subjectType string, subjectID string)) *RelationService_LookupResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *RelationService_LookupResources_Call) Return(_a0 []string, _a1 error) *RelationService_LookupResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RelationService_LookupResources_Call) RunAndReturn(run func(context.Context, string, string, string, string) ([]string, error)) *RelationService_LookupResources_Call {
	_c.Call.Return(run)
	return _c
}

// NewRelationService creates a new instance of RelationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRelationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RelationService {
	mock := &RelationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
